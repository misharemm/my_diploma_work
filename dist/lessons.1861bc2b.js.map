{"mappings":"AAAA,SAAS,gBAAgB,CAAC,oBAAoB;IAC5C,MAAM,WAAW,SAAS,aAAa,CAAC;IACxC,MAAM,WAAW,SAAS,aAAa,CAAC;IACxC,MAAM,gBAAgB,SAAS,aAAa,CAAC;IAC7C,MAAM,UAAU,SAAS,aAAa,CAAC;IAEvC,SAAS,gBAAgB,CAAC,SAAS,CAAC;QAClC,IAAI,MAAM,MAAM,KAAK,YAAY,SAAS,QAAQ,CAAC,MAAM,MAAM,GAAG;YAChE,SAAS,KAAK,CAAC,OAAO,GAAG;YACzB,SAAS,KAAK,CAAC,aAAa,GAAI;QAClC;QACA,IAAI,MAAM,MAAM,KAAK,YAAY,SAAS,QAAQ,CAAC,MAAM,MAAM,GAAG;YAChE,cAAc,KAAK,CAAC,OAAO,GAAG;YAC9B,cAAc,KAAK,CAAC,aAAa,GAAI;QACvC;IACF;IAEA,QAAQ,gBAAgB,CAAC,SAAS,CAAC;QACjC,MAAM,cAAc;QAEpB,SAAS,KAAK,CAAC,OAAO,GAAG;QACzB,SAAS,KAAK,CAAC,aAAa,GAAI;QAChC,cAAc,KAAK,CAAC,OAAO,GAAG;QAC9B,cAAc,KAAK,CAAC,aAAa,GAAI;IACvC;AACF;AAEA,SAAS,gBAAgB,CAAC,oBAAoB;IAC5C,MAAM,WAAW,SAAS,aAAa,CAAC;IACxC,MAAM,YAAY,SAAS,aAAa,CAAC;IACzC,MAAM,UAAU,SAAS,aAAa,CAAC;IAEvC,MAAM,eAAe,CAAC,SAAS;QAC3B,MAAM,SAAS,SAAS,aAAa,CAAC;QACtC,OAAO,SAAS,CAAC,GAAG,CAAC,kBAAkB;QACvC,OAAO,SAAS,GAAG,CAAC,oBAAoB,EAAE,QAAQ,IAAI,CAAC;QACvD,OAAO;IACX;IAEA,MAAM,gBAAgB,OAAO;QACzB,IAAI;YACA,MAAM,WAAW,MAAM,MAAM,SAAS;gBAClC,QAAQ;gBACR,SAAS;oBACL,gBAAgB;oBAChB,iBAAiB,CAAC,OAAO,EAAE,QAAQ,CAAC;gBACxC;gBACA,MAAM,KAAK,SAAS,CAAC;oBACjB,OAAO;oBACP,UAAU;wBAAC;4BAAE,MAAM;4BAAQ,SAAS;wBAAY;qBAAE;oBAClD,YAAY;gBAChB;YACJ;YAEA,IAAI,CAAC,SAAS,EAAE,EACZ,MAAM,IAAI,MAAM,CAAC,6BAA6B,EAAE,SAAS,MAAM,CAAC,GAAG,EAAE,SAAS,UAAU,CAAC,CAAC;YAG9F,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,IAAI,CAAC,KAAK,OAAO,IAAI,KAAK,OAAO,CAAC,MAAM,KAAK,GACzC,MAAM,IAAI,MAAM;YAGpB,MAAM,YAAY,KAAK,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO;YACjD,OAAO;QACX,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,+BAA+B;YAC7C,OAAO,CAAC,oRAAgD,EAAE,MAAM,OAAO,CAAC,CAAC;QAC7E;IACJ;IAEA,MAAM,WAAW;QACb,MAAM,cAAc,SAAS,KAAK,CAAC,IAAI;QACvC,IAAI,CAAC,aACD;QAGJ,MAAM,YAAY,aAAa,aAAa;QAC5C,QAAQ,WAAW,CAAC;QAEpB,SAAS,KAAK,GAAG;QAEjB,MAAM,iBAAiB,aAAa,qCAAY;QAChD,QAAQ,WAAW,CAAC;QAEpB,MAAM,YAAY,MAAM,cAAc;QAEtC,QAAQ,WAAW,CAAC;QAEpB,MAAM,WAAW,aAAa,WAAW;QACzC,QAAQ,WAAW,CAAC;IACxB;IAEA,UAAU,gBAAgB,CAAC,SAAS;AACtC","sources":["src/scripts/AI.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', function() {\n  const AIButton = document.querySelector('.lessons__AI');\n  const AIWindow = document.querySelector('.AI');\n  const closeAiWindow = document.querySelector('.AIclose');\n  const closeAi = document.querySelector('.AIclose');\n\n  AIButton.addEventListener('click', (event) => {\n    if (event.target === AIButton || AIButton.contains(event.target)) {\n      AIWindow.style.opacity = '1';\n      AIWindow.style.pointerEvents  = 'all';\n    }\n    if (event.target === AIButton || AIButton.contains(event.target)) {\n      closeAiWindow.style.opacity = '1';\n      closeAiWindow.style.pointerEvents  = 'all';\n    }\n  });\n\n  closeAi.addEventListener('click', (event) => {\n    event.preventDefault();\n\n    AIWindow.style.opacity = '0';\n    AIWindow.style.pointerEvents  = 'none';\n    closeAiWindow.style.opacity = '0';\n    closeAiWindow.style.pointerEvents  = 'none';\n  });\n});\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const AItyping = document.querySelector('.AI__typing__textarea');\n  const sendAiBtn = document.querySelector('.AI__sendIcon');\n  const chatBox = document.querySelector('.AI__chatBox');\n\n  const createChatLi = (message, className) => {\n      const chatLi = document.createElement('li');\n      chatLi.classList.add('AI__incomeText', className);\n      chatLi.innerHTML = `<p class=\"AI__text\">${message}</p>`;\n      return chatLi;\n  };\n\n  const getAIResponse = async (userMessage) => {\n      try {\n          const response = await fetch(API_URL, {\n              method: 'POST',\n              headers: {\n                  'Content-Type': 'application/json',\n                  'Authorization': `Bearer ${API_KEY}`\n              },\n              body: JSON.stringify({\n                  model: \"gpt-3.5-turbo\",\n                  messages: [{ role: \"user\", content: userMessage }],\n                  max_tokens: 150\n              })\n          });\n\n          if (!response.ok) {\n              throw new Error(`Network response was not ok: ${response.status} - ${response.statusText}`);\n          }\n\n          const data = await response.json();\n          if (!data.choices || data.choices.length === 0) {\n              throw new Error('No choices returned from API');\n          }\n\n          const aiMessage = data.choices[0].message.content;\n          return aiMessage;\n      } catch (error) {\n          console.error('Error fetching AI response:', error);\n          return `Виникла помилка при отриманні відповіді від AI: ${error.message}`;\n      }\n  };\n\n  const handleAI = async () => {\n      const userMessage = AItyping.value.trim();\n      if (!userMessage) {\n          return;\n      }\n\n      const newChatLi = createChatLi(userMessage, 'AI__incomeText-outcome');\n      chatBox.appendChild(newChatLi);\n\n      AItyping.value = '';\n\n      const thinkingChatLi = createChatLi(\"Думаю...\", 'AI__incomeText-income');\n      chatBox.appendChild(thinkingChatLi);\n\n      const aiMessage = await getAIResponse(userMessage);\n\n      chatBox.removeChild(thinkingChatLi);\n\n      const aiChatLi = createChatLi(aiMessage, 'AI__incomeText-income');\n      chatBox.appendChild(aiChatLi);\n  };\n\n  sendAiBtn.addEventListener('click', handleAI);\n});\n\n"],"names":[],"version":3,"file":"lessons.1861bc2b.js.map","sourceRoot":"/__parcel_source_root/"}